# Python 基本文法

# 演算子

# 識別子 => _クラス名_, _変数_
# コード => _結果_

_クラス名_ = int
_文字列_ = 'A'
__オブジェクト__ = 'A'
__オブジェクト2__ = 'A'
__プロパティ__ = 'age'
__型名__ = int

'''
@poly(__オブジェクト__;オブジェクト;_変数_;_結果_)
@poly(__オブジェクト2__;オブジェクト;_変数_;_結果_)
@poly(__プロパティ__;[プロパティ|フィールド|属性] _プロパティ名_;_文字列_)
@poly(__型名__;_クラス名_;整数 int;[浮動小数点数|実数] float;文字列 str;論理値 bool;リスト list;タプル tuple;辞書 dict;集合 set;バイト列 bytes)
'''

__オブジェクト__ == __オブジェクト2__
'''
@alt(かどうか=[か知りたい|か調べたい])

２つの__オブジェクト__[が|は][等しい|同じ値]かどうか
'''

__オブジェクト__ is __オブジェクト2__
'''
@alt(同一|同じ)

２つの__オブジェクト__[が|は]同一[参照|]かどうか
'''

repr(__オブジェクト__)
'''
__オブジェクト__をデバッグ向けの文字列に変換したい
'''

str(__オブジェクト__)
'''
__オブジェクト__を[|ユーザ向けの]文字列に変換したい
'''

# 組み込み関数（リスト）

iter(__オブジェクト__)
'''
__オブジェクト__のイテレータが欲しい
__オブジェクト__を[イテラブル|イテレータ]に変換したい
'''

# 組み込み関数（バイト列、IO）


bytearray(_文字列_)
'''
_文字列_をバイト配列に変換したい
'''

bytes(_文字列_)
'''
_文字列_をバイト列に変換したい
'''

memoryview(__オブジェクト__)
'''
__オブジェクト__のメモリビューが欲しい
'''

# 組み込み関数（関数）

callable(__オブジェクト__)
'''
__オブジェクト__[が|は][関数|呼び出し可能|コール可能]かどうか
'''

eval(_文字列_)
'''
_文字列_を[式として|]評価したい
'''

globals()
'''
グローバル変数の一覧[が欲しい|を列挙したい]
'''


class Person:
    def __init__(self):
        self.TYPE = 'Konoha'
        self.age = 17


__オブジェクト__ = Person()
text = 'age'
s = 'age'

# 組み込み関数（オブジェクト）

プロパティ名 = 'age'

delattr(__オブジェクト__, __プロパティ__)
'''
@alt(プロパティ|属性|フィールド)
@alt(削除したい|消したい|取り除く)

__オブジェクト__[の|から]__プロパティ__を削除したい
'''

getattr(__オブジェクト__, __プロパティ__)
'''
__オブジェクト__の__プロパティ__の値が欲しい
'''

hasattr(__オブジェクト__, __プロパティ__)
'''
@alt(存在する|ある)
__オブジェクト__に__プロパティ__が存在するかどうか
__オブジェクト__が__プロパティ__を持つかどうか
'''

値 = 'A'

setattr(__オブジェクト__, __プロパティ__, 値)
'''
__オブジェクト__の__プロパティ__[の値|]を値に設定したい
__オブジェクト__の__プロパティ__の値を設定したい
'''

hash(__オブジェクト__)
'''
__オブジェクト__のハッシュ値[|求めたい]
'''

isinstance(__オブジェクト__, __型名__)
'''
__オブジェクト__[は|が]__型名__かどうか
'''

isinstance(__オブジェクト__, __X__)
'''
__オブジェクト__[は|が]__Y__かどうか
'''


issubclass(_クラス名_, _クラス名2_)
'''
_クラス名_は_クラス名2_のサブクラスかどうか
'''

id(__オブジェクト__)
'''
@alt(オブジェクト識別子|固有のID|ポインタ)

__オブジェクト__のオブジェクト識別子が欲しい
'''

type(__オブジェクト__)
'''
__オブジェクト__の[クラス|型|種類][を調べたい|[を|が]知りたい]
'''
