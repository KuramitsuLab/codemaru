# math

import math
'''
[math[|モジュール]|算術計算ライブラリ]を[インポートしたい|使いたい]
'''

_整数_ = 2
__数値__, __数値2__ = 1.5, 3.1
#__整数2__, __整数3__ = 1, 3, 7
'''
@poly(__数値__;_整数_;_数値_;_結果_)
@poly(__数値2__;_整数_;_数値_;_結果_)
'''

math.sqrt(__数値__)
'''
@alt(が計算したい|を求めたい|がほしい)
[__数値__の|][平方根|ルート|スクエアルート]が計算したい
'''

math.ceil(__数値__)
'''
[__数値__の|][天井|天井数]が計算したい
__数値__以上の最小の整数が計算したい
[__数値__を|]切り上げて整数に変換したい
__数値__[の少数|]を切り上げたい
'''

math.floor(__数値__)
'''
[__数値__の|][床|床数]が計算したい
__数値__以下の最大の整数が計算したい
[__数値__を|]切り下げて整数に変換したい
__数値__[の少数|]を切り下げたい
'''

math.gcd(_整数_, _整数_)
'''
@alt(最大公約数|GCD)

[自然数|_整数_と_整数_|２つの[_整数_|自然数]]の最大公約数が計算したい
'''

math.lcm(_整数_, _整数_)
'''
@alt(最小公倍数|LCM)

[自然数|_整数_と_整数_|２つの_整数_]最小公倍数が計算したい
'''

math.gcd(_整数_, _整数_, _整数_)
'''
[３|三][つの|]_整数_の最大公約数が計算したい
'''

math.lcm(_整数_, _整数_, _整数_)
'''
[３|三][つの|]_整数_の最小公倍数が計算したい
'''

k = 2

math.comb(_整数_, _整数_)
'''
@alt(コンビネーション|[組合せ|組み合わせ]|nCk)
[_整数_と_整数_の|]コンビネーションが計算したい
_整数_個の集まりから_整数_個[重複なく|]選ぶ方法を計算したい
異なる_整数_個のものから_整数_個選ぶ場合の数が欲しい
'''

math.copysign(__数値__, __数値__)
'''
__数値__の符号を同じにしたい
__数値__の符号をコピーにしたい
'''

math.fabs(__数値__)
'''
__数値__の絶対値が計算したい
'''

math.factorial(_整数_)
'''
[_整数_の|]階乗が計算したい
'''

math.frexp(__数値__)[0]
'''
__数値__の仮数[|部[|分]]が欲しい
'''

math.frexp(__数値__)[1]
'''
__数値__の指数[|部[|分]]が欲しい
'''

math.isclose(__数値__, __数値__)
'''
２つの__数値__[が|は][十分に近い|近似値|ほぼ等しい]かどうか
'''

math.isfinite(__数値__)
'''
__数値__[が|は]有限かどうか
'''

math.isinf(__数値__)
'''
__数値__[が|は]無限大かどうか
'''

math.isnan(__数値__)
'''
__数値__[が|は][NaN|非数]かどうか
'''

math.modf(__数値__)[0]
'''
__数値__の小数[部[|分]|]が欲しい
'''

math.modf(__数値__)[1]
'''
__数値__の整数[部[|分]|]が欲しい
'''

math.perm(_整数_)
'''
@(総数|数)
_整数_の[順列|並べ方]の総数が計算したい
'''

math.perm(_整数_, _整数_)
'''
@alt(とき|時|場合)
_整数_個から_整数_個取り出したときの[順列|並べ方]の総数が計算したい
_整数_個のものから_整数_個取り出したときの並べ方[の総数|]が計算したい
'''

# math.prod(l)
# @type(l, リスト)の要素積

math.remainder(__数値__, __数値2__)
'''
__数値__を__数値2__で割った剰余が計算したい
'''

math.exp(__数値__)
'''
[e|自然対数の底|ネイピア数]の__数値__乗が計算したい
[e|自然対数の底|ネイピア数]の乗数が計算したい
'''

math.log(__数値__)
'''
[__数値__の|]自然対数が計算したい
'''

math.log(__数値__, _整数_)
'''
{_整数_を底としたい|[__数値__の|]}対数が計算したい
[__数値__の|]_整数_進対数が計算したい
'''

math.log2(__数値__)
'''
[__数値__の|][二進|２進|バイナリ]対数が計算したい
２を底と[した|する][__数値__の|]対数が計算したい
'''

math.log10(__数値__)
'''
[__数値__の|]常用対数が計算したい
'''

math.cos(__数値__)  # 単位はラジアン
'''
[__数値__の|][余弦|コサイン|cos]が計算したい
'''

math.sin(__数値__)  # 単位はラジアン
'''
[__数値__の|][正弦|サイン|sin]が計算したい
'''

math.tan(__数値__)  # 単位はラジアン
'''
[__数値__の|][正接|タンジェント|tan]が計算したい
'''

math.acos(__数値__)
'''
[__数値__の|][逆余弦|アークコサイン]が計算したい
[__数値__の|][余弦|コサイン|cos][の逆数|からラジアン]が計算したい
'''

math.asin(__数値__)
'''
[__数値__の|][逆正弦|アークサイン]が計算したい
[__数値__の|][正弦|サイン|sin][の逆数|からラジアン]が計算したい
'''

math.atan(__数値__)
'''
[__数値__の|][逆正接|アークタンジェント]が計算したい
[__数値__の|][正接|タンジェント|tan][の逆数|からラジアン]が計算したい
'''

math.degrees(__数値__)  # 単位はラジアン
'''
[ラジアン|__数値__]の角度が計算したい
'''

math.radians(__数値__)  # 単位は弧度法
'''
[__数値__の|]ラジアンが計算したい
'''

math.acosh(__数値__)
'''
[__数値__の|]逆双曲線余弦が計算したい
[__数値__の|][双曲線余弦|ハイパボリック・コサイン]の逆数が計算したい
'''

math.asinh(__数値__)
'''
[__数値__の|]逆双曲線正弦が計算したい
[__数値__の|][双曲線正弦|ハイパボリック・サイン]の逆数が計算したい
'''

math.atanh(__数値__)
'''
[__数値__の|]逆双曲線正接が計算したい
[__数値__の|][双曲線正接|ハイパボリック・タンジェント]の逆数が計算したい
'''

math.cosh(__数値__)  # 単位はラジアン
'''
[__数値__の|]の[双曲線余弦|ハイパボリック・コサイン]が計算したい
'''

math.sinh(__数値__)  # 単位はラジアン
'''
[__数値__の|]の[双曲線正弦|ハイパボリック・サイン]が計算したい
'''

math.tanh(__数値__)  # 単位はラジアン
'''
[__数値__の|][双曲線正接|ハイパボリック・タンジェント]が計算したい
'''


_リスト_ = (1, 2)
_リスト2_ = (0, 1)

math.dist(_リスト_, _リスト2_)
'''
[[２|]point間の|]ユークリッド距離が計算したい
'''

math.hypot(__数値__, __数値__)
'''
__数値__と__数値__の[斜辺|ノルム]が計算したい
原点からの|点までの]距離が計算したい
'''

math.gamma(__数値__)
'''
ガンマ関数を計算したい
ガンマ関数の値が計算したい
'''

math.lgamma(__数値__)
'''
ガンマ関数の絶対値に自然対数をとった値が計算したい
'''

math.pi
'''
[円周率|π]が欲しい
'''

math.e
'''
[ネイピア数|自然対数の底]が欲しい
'''

math.inf
'''
無限大が欲しい
'''

-math.inf
'''
無限小が欲しい
'''

math.nan
'''
[NaN|非数]が欲しい
'''
