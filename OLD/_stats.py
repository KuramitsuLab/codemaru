import pandas as pd
import numpy as np
import scipy


# 統計量
_リスト_ = [1, 2, 3]
_配列_ = np.array([1, 2, 3])
_列名_ = 'A'
_列名2_ = 'B'
_データフレーム_ = pd.DataFrame(data={_列名_: _リスト_})
_データ列_ = pd.Series(_配列_)

__データフレームまたは列名__ = _データフレーム_
__リストまたは配列__ = [1, 2, 3]
__配列または列名__ = _配列_
'''
@poly(__データフレームまたは列名__;_データフレーム_;_列名_ _データフレーム_[_列名_])
@poly(__リストまたは配列__;_リスト_;_配列_)
@poly(__配列または列名__;_リスト_;_配列_;_列名_ _データフレーム_[_列名_])
'''

_上限値_ = 100
_下限値_ = 0

_何の_ = None

_何の_
'''
@alt(要約統計量|記述統計量|[基本|]統計量|代表値)
@alt(基本統計量=[統計量|記述統計量|[平均|標準偏差|四分位点]など])
@alt(まとめて|一度に|[全部|全て])

要約統計量[|を求めたい]
基本統計量[|を[|まとめて]見たい]
'''

__データフレームまたは列名__.describe()
'''
__データフレームまたは列名__の要約統計量[|を求めたい]
__データフレームまたは列名__の基本統計量[|を[|まとめて]知りたい]
'''

_データフレーム_[[_列名_, _列名2_]].describe()
'''
_列名_と_列名2_の要約統計量[|を求めたい]
_列名_と_列名2_の基本統計量[|を[|まとめて]知りたい]
'''

pd.Series(__リストまたは配列__).describe()
'''
__リストまたは配列__の要約統計量[|を求めたい]
__リストまたは配列__の基本統計量[|を[|まとめて]知りたい]
'''

# 平均

__データフレームまたは列名__.mean()
'''
@alt(平均値|平均)

__データフレームまたは列名__の平均値[が求めたい|]
'''


scipy.stats.gmean(__配列または列名__)
'''
__配列または列名__の[幾何平均|相乗平均][を求めたい|]
'''

scipy.stats.hmean(__配列または列名__)
'''
__配列または列名__の調和平均[を求めたい|]
'''

## https://docs.scipy.org/doc/scipy/reference/stats.html#

scipy.stats.tmean(__配列または列名__, limits=(_下限値_, _上限値_), inclusive=(True, True))
'''
@alt(外れ値を除いた|[上限|下限|範囲]指定をした)
外れ値を除いた__配列または列名__の算術平均[を求めたい|]
__配列または列名__のトリム平均値[を求めたい|]
'''

# 分位数

__データフレームまたは列名__.median()
'''
@alt(中央値|メディアン|[第二四分位数|50パーセンタイル])

__データフレームまたは列名__の中央値[|が知りたい]
'''

__データフレームまたは列名__.quantile(0.25)
'''
@alt(第一四分位数|25パーセンタイル|上位25[％|パーセント])

__データフレームまたは列名__の第一四分位数[|が知りたい]
'''

__データフレームまたは列名__.quantile(0.75)
'''
@alt(第三四分位数|75パーセンタイル|下位25[％|パーセント])

__Y__の第三四分位数[|が知りたい]
'''

_パーセント_ = 50

__データフレームまたは列名__.quantile(_パーセント_/100)
'''
__データフレームまたは列名__の[パーセンタイル|分位数][|が知りたい]
'''

__データフレームまたは列名__.mode()
'''
@alt(最頻値|モード)

__データフレームまたは列名__の最頻値[|が知りたい]
__データフレームまたは列名__において、どの値が[最も多い|頻出]か知りたい
'''

__データフレームまたは列名__.std()
'''
__データフレームまたは列名__の標準偏差[|が知りたい]
__データフレームまたは列名__の不偏標準偏差[|を知りたい]
'''

__データフレームまたは列名__.std(ddof=0)
'''
__データフレームまたは列名__の母標準偏差[|を知りたい]
'''

__データフレームまたは列名__.std(ddof=1)
'''
__データフレームまたは列名__の標本標準偏差[|を知りたい]
'''

__データフレームまたは列名__.var()
'''
__データフレームまたは列名__の分散[|が知りたい]
__データフレームまたは列名__[が|は]どの程度、分散しているか[|知りたい]
'''

__データフレームまたは列名__.var(ddof=0)
'''
__データフレームまたは列名__の標本分散[|が知りたい]
'''

__データフレームまたは列名__.var(ddof=1)
'''
__データフレームまたは列名__の不偏分散[|が知りたい]
'''

__データフレームまたは列名__.kurt()
'''
__データフレームまたは列名__の[歪度|Kurtosis|歪み][|が知りたい]
__データフレームまたは列名__[が|は]{正規分布から|どの程度、}歪んでいるか知りたい
'''

__データフレームまたは列名__.skew()
'''
__データフレームまたは列名__の[尖度|Skewness|尖り][|が知りたい]
__データフレームまたは列名__[が|は]{正規分布から|どの程度、}尖っているか知りたい
'''

# 標準偏差

scipy.stats.moment(__配列または列名__, moment=n)
'''
__配列または列名__のn次モーメント[を求めたい|]
'''

scipy.stats.zscore(__配列または列名__)
'''
__配列または列名__を標準化する
'''

50 + 10 * scipy.stats.zscore(__配列または列名__)
'''
__配列または列名__の偏差値を求める
'''

scipy.stats.sem(__配列または列名__)
'''
__配列または列名__の[|平均の]標準誤差[を求めたい|]
'''

scipy.stats.tvar(__配列または列名__, limits=(_下限値_, _上限値_), inclusive=(True, True))
'''
外れ値を[除いた|無視して]__配列または列名__の分散[を求めたい|]
__配列または列名__のトリム分散[を求めたい|]
'''

scipy.stats.kurtosis(__配列または列名__, bias=False)
'''
__配列または列名__の[尖度|Kurtosis|尖り][を求めたい|]
'''

scipy.stats.kurtosis(__配列または列名__, fisher=True, bias=False)
'''
__配列または列名__のフィシャー流の尖度[を求めたい|]
'''

scipy.stats.skew(__配列または列名__, bias=False)
'''
__配列または列名__の[歪度|Skewness|歪み][を求めたい|]
'''

scipy.stats.shapiro(__配列または列名__)
'''
[__配列または列名__が|]正規分布かどうか仮説検定したい
[シャピロ・ウィルク|SW]検定[を行いたい|]
'''

scipy.stats.kstest(__配列または列名__, 'norm')
'''
__配列または列名__が正規分布かどうか仮説検定したい
[コルモゴロフ・スミルノフ|KS]検定[を行いたい|]
'''
