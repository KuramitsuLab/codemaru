# _文字列_

import keyword
import re
import string
'''
@alt(先頭|最初|左[側|端])
@alt(末尾|最後|後ろ|右[側|端])
@alt(左側|左)
@alt(右側|右)
@alt(小文字|英小文字)
@alt(大文字|英大文字)
'''

_文字列_ = 'ABC'
_文字_ = 'A'
_リスト_ = ['A', 'B', 'C']
n = 1


__文字コード__ = ord('A')
__セパレータ__ = ";"
__文字列または文字__ = 'A'
__文字列または書式__ = 'A'
__リストまたはタプル__ = []

'''
@poly(__文字コード__;_整数_;文字コード)
@poly(__セパレータ__;_文字列_;_文字_;空白 " ";カンマ ",";改行 "\n";タブ "\t")
@poly(__文字列または文字__;_文字列_;_文字_;空白 " ";カンマ ",";改行 "\n";タブ "\t")
@poly(__文字列または書式__;_文字列_;[書式|テンプレート] 書式文字列)
@poly(__リストまたはタプル__;_リスト_;_タプル_)
@poly(__文字種__;大文字 upper;小文字 lower;数字 digit;アルファベット alpha;英数字 alnum;空白 space;アスキー文字 ascii)
'''

""
'''
@alt(が使いたい|が欲しい|)
空文字[|列]が使いたい
'''

"\n"
'''
改行[|文字]が使いたい
'''

"\t"
'''
タブ[|文字]が使いたい
'''

" "
'''
[空白|スペース][|文字]が使いたい
'''

list(string.ascii_letters)
'''
@alt(全文字集合|全ての文字セット)
@alt(アルファベット|英[文|]字)

アルファベットの全文字集合が欲しい
アルファベットを[全て|]列挙したい
'''

list(string.ascii_letters+string.digits)
'''
[英数字の全文字集合|全ての英数字集合]が欲しい
英数字を[全て|]列挙したい
'''

list(string.ascii_lowercase)
'''
小文字の全文字集合が欲しい
小文字を[全て|]列挙したい
'''

list(string.ascii_uppercase)
'''
大文字の全文字集合が欲しい
大文字を[全て|]列挙したい
'''

list(string.digits)
'''
数字の全文字集合が欲しい
数字を[全て|]列挙したい
'''

list(string.hexdigits)
'''
[十六|１６]進数字の全文字集合が欲しい
[十六|１６]進数字を[全て|]列挙したい
'''

list(string.octdigits)
'''
[８|八]進数字の全文字集合が欲しい
[８|八]進数字を[全て|]列挙したい
'''

list(string.punctuation)
'''
@alt(句読点|句点)

句読点の全文字集合が欲しい
句読点文字を[全て|]列挙したい
'''

list(string.printable)
'''
@alt(印字可能な文字|印字できる文字|印字)

印字可能な全文字集合が欲しい
印字可能な文字を[全て|]列挙したい
'''

list(string.whitespace)
'''
空白の全文字集合が欲しい
空白文字を[全て|]列挙したい
'''

for c in string.ascii_lowercase:
    print(c)
'''
{全ての小文字を|順番に}処理したい
'''

for c in string.ascii_uppercase + string.digits:
    print(c)
'''
{全ての英数字を|順番に}処理したい
'''


chr(__文字コード__)
'''
@alt(文字コード|ユニコード)
__文字コード__[から|を]文字[へ|に]変換したい
__文字コード__に[相当|対応]したい文字[|が知りたい]
'''

ord(_文字_)
'''
@alt(ユニコード=[文字コード|ユニコード|[ASCII|アスキー]コード])

_文字_をユニコードに変換したい
_文字_のユニコード[|が知りたい]
'''

ord(_文字列_[n])
'''
_文字列_のn番目をユニコードに変換したい
'''

[ord(ch) for ch in _文字列_]
'''
_文字列_をユニコード[のリスト|列]に変換したい
'''

_文字列_.upper()
'''
_文字列_を[全て|]大文字に変換したい
[_文字列_中の|]小文字を大文字に変換したい
'''

_文字列_.lower()
'''
_文字列_を小文字に[全て|]変換したい
[_文字列_中の|]大文字を小文字に変換したい
'''

_文字列_.casefold()
'''
@alt(ケース|大文字小文字)

_文字列_のケースを[変換したい|整えたい]
_文字列_を[全て|]小文字に変換したい
_文字列_を[積極的に|特殊文字も含め]小文字に変換したい
'''

list(_文字列_)
'''
_文字列_を[文字|文字の]リストに変換したい
_文字列_中の文字を列挙したい
'''

_文字列_.split()
'''
@alt(区切りたい|分割したい)

{_文字列_を|空白で}[区切りたい|字句解析したい]
'''

list(map(int, _文字列_.split(__セパレータ__)))
'''
@alt(整数リスト|整数のリスト|[|整]数列)

{_文字列_を|__セパレータ__で}区切って、整数リストに変換したい
'''

_文字列_.splitlines()
'''
{_文字列_を|改行で}[分割し|区切り]、_文字列_リストに変換したい
{_文字列_を|改行で}区切りたい
'''

_文字列_.rsplit()
'''
{_文字列_を|[末尾|最後|右]から|空白で}区切りたい
'''

# セパレータ


_文字列_.split(__セパレータ__)
'''
{_文字列_を|__セパレータ__で}区切って、列挙したい
'''

_文字列_.rsplit(__セパレータ__)
'''
{_文字列_を|[末尾|最後|右]から|__セパレータ__で}区切って、列挙したい
'''

_文字列_.partition()
'''
@alt(二分したい|[二|]分割したい|二つに分けたい)

{_文字列_を|空白で}二分したい
'''

_文字列_.partition(__セパレータ__)
'''
{_文字列_を|[|最初の]__セパレータ__で}二分したい
'''

_文字列_.rpartition(__セパレータ__)
'''
{_文字列_を|最後の__セパレータ__で}二分したい
'''

_文字列_.partition(__セパレータ__)[0]
'''
@alt(とき|時|場合)
@alt(二分し|二つに区切って)
@alt(分けた|分割した)

{_文字列_を|[|最初の]__セパレータ__で}二分して、[前半|前の方]を得る
'''

_文字列_.partition(__セパレータ__)[-1]
'''
{_文字列_を|[|最初の]__セパレータ__で}二分して、[残り|後半|後ろの方]を得る
'''

_文字列_.rpartition(__セパレータ__)[0]
'''
{_文字列_を|最後の__セパレータ__で}二分して、[前半|最初の方]を得る
'''

_文字列_.rpartition(__セパレータ__)[-1]
'''
{_文字列_を最後の__セパレータ__で}二分して、[残り|後半|後ろの方]を得る
{_文字列_を最後の__セパレータ__で}分けたときの[後半の|残りの]_文字列_[|を得る|を取り出す]
'''

__文字列または文字__ = 'A'
置換後の文字列 = 'a'

_文字列_.replace(__文字列または文字__, 置換後の文字列)
'''
@alt(置き替えたい|置換したい)

_文字列_を置き替えたい
[_文字列_中の|]__文字列または文字__を置き替えたい
[_文字列_中の|]__文字列または文字__を[新しい|別の]_文字列_[に|へ]置き替えたい
[_文字列_中の|]文字を[新しい|別の]文字[に|へ]置き替えたい
'''


_文字列_.replace(__文字列または文字__, 置換後の文字列, n)
'''
{_文字列_を|n回だけ}置き替えたい
{_文字列_を|回数制限して}置き替えたい
{[_文字列_中の|]文字を|n回だけ}置き替えたい
'''

_文字列_.expandtabs(tabsize=n)
'''
_文字列_中のタブ[文字|]を[|n個の]空白に[置き替えたい|したい]
'''

_文字列_.strip()
'''
@alt(不要な=[|不要な|余分な])

_文字列_[|の両端]から不要な[空白|空白や改行]を除きたい
_文字列_をトリムしたい
'''

_文字列_.lstrip()
'''
_文字列_の先頭から不要な[空白|空白やタブ]を除きたい
_文字列_を左トリムしたい
'''

_文字列_.rstrip()
'''
_文字列_の末尾から不要な[空白|改行]を除きたい
_文字列_を右トリムしたい
'''

# 文字/__文字列または文字__

__文字列または文字__ = 'A'

_文字列_.replace(__文字列または文字__, '')
'''
@alt(除きたい|取り[除|の]きたい|除去したい|消したい)

_文字列_から__文字列または文字__を[全て|]除きたい
'''

_文字列_.strip(__文字列または文字__)
'''
_文字列_の両端から__文字列または文字__を除きたい
'''

_文字列_.lstrip(__文字列または文字__)
'''
_文字列_の先頭から__文字列または文字__を除きたい
'''

_文字列_.rstrip(__文字列または文字__)
'''
_文字列_の末尾から__文字列または文字__を除きたい
'''

_文字列_.zfill(width=40)
'''
@alt(ゼロ埋めしたい|パディングしたい)

_文字列_をゼロ埋めしたい
'''

str(n).zfill(width=40)
'''
[整数|数値]をゼロ埋めした_文字列_に変換したい
'''

_文字列_.center(width=40)
'''
_文字列_を[センタリング|中央寄せ][に|]したい
'''

_文字列_.ljust(width=40)
'''
_文字列_を左寄せ[に|]したい
'''

_文字列_.rjust(width=40)
'''
_文字列_を右寄せ[に|]したい
'''

_文字列_.capitalize()
'''
_文字列_をキャピタライズしたい
_文字列_の先頭だけ大文字化したい
'''

_文字列_.swapcase()
'''
[_文字列_の|]大文字と小文字を[交換したい|逆にしたい|入れ替えたい]
_文字列_のケースを[入れ替えたい|交換したい|逆にしたい]
'''

# 包含

_文字列またはリスト_ = 'AB'

_文字列_ in _文字列またはリスト_
'''
_文字列_[が|は]_文字列またはリスト_に含まれるかどうか
_文字列_が_文字列またはリスト_のいずれかどうか
'''

_文字列_ not in _文字列またはリスト_
'''
_文字列_が_文字列またはリスト_に含まれないかどうか
_文字列_が_文字列またはリスト_のいずれでもないかどうか
'''

_文字_ in _文字列またはリスト_
'''
文字が_文字列またはリスト_に含まれるかどうか
'''

_文字_ not in _文字列またはリスト_
'''
文字が_文字列またはリスト_に含まれないかどうか
'''

_文字列_.find(__文字列または文字__)
'''
{_文字列_[中|]から|__文字列または文字__[の位置|]を}探したい
{_文字列_の先頭から|__文字列または文字__[の位置|]を}探したい
'''


_文字列_.find(__文字列または文字__, 開始位置) != -1
'''
{_文字列_の[開始|指定した]位置[以降に|より後に|先に]|__文字列または文字__が}含まれるかどうか
'''

_文字列_.find(__文字列または文字__, 開始位置) == -1
'''
{_文字列_の[開始|指定した]位置[以降に|より後に|から先に]|__文字列または文字__が}含まれないかどうか
'''

_文字列_.find(__文字列または文字__, 0, 終了位置) != -1
'''

{_文字列_の[終了|指定した]位置[より前に|以前に]|__文字列または文字__が}含まれるかどうか
'''

_文字列_.find(__文字列または文字__, 0, 終了位置) == -1
'''
{_文字列_の[終了|指定した]位置[より前に|以前に]|__文字列または文字__が}含まれないかどうか
'''


_文字列_.find(__文字列または文字__, 開始位置, 終了位置) != -1
'''
{_文字列_の指定した[範囲|区間][位置の間]に|__文字列または文字__が}含まれるかどうか
'''

_文字列_.find(__文字列または文字__, 開始位置, 終了位置) == -1
'''
_文字列_の開始位置番目と終了位置番目の間に__文字列または文字__が含まれないかどうか
{_文字列_の開始位置[|番目]からと終了位置[|番目]までの[間|範囲]に|__文字列または文字__が}含まれないかどうか
'''

_文字列_.find(__文字列または文字__, 開始位置)  # 見つからない場合は-1
'''
_文字列_の後半から__文字列または文字__[の位置|]を探したい
開始位置を指定して__文字列または文字__[の位置|]を探したい
'''

_文字列_.find(__文字列または文字__, 0, 終了位置)  # 見つからない場合は-1
'''
_文字列_の前半から__文字列または文字__[の位置|]を探したい
終了位置[を指定して|まで]__文字列または文字__[の位置|]を探したい
'''

_文字列_.find(__文字列または文字__, 開始位置, 終了位置)  # 見つからない場合は-1
'''
{__文字列または文字__を|範囲を指定して}探したい
{_文字列_の開始位置から終了位置まで|__文字列または文字__を}探したい
'''

_文字列_.rfind(__文字列または文字__)  # 見つからない場合は-1
'''
{_文字列_の末尾から|__文字列または文字__を}探したい
'''

_文字列_.find(__文字列または文字__, 開始位置, 終了位置)  # 見つからない場合は-1
'''
{__文字列または文字__を|範囲を指定して|後方から}探したい
{_文字列_の末尾から|範囲を指定して__文字列または文字__を}探したい
'''

_リスト_ = ['A', 'B', 'C']

''.join(map(str, _リスト_))
'''
@alt(連結したい|結合したい|つなげる|一つ[|の文字列][に|化]したい)

{_リスト_を|文字列として}連結したい
'''


__文字列または文字__.join(map(str, _リスト_))
'''
{_リスト_を|__文字列または文字__[を挟んで|を使って]|文字列として}連結したい
'''

_文字列_.count(__文字列または文字__)
'''
@alt(カウントしたい|数えたい)
@alt(出現数=出現[|回数]|登場[|回数])

_文字列_中の__文字列または文字__の出現数[が知りたい|]
_文字列_中の__文字列または文字__をカウントしたい
_文字列_中に__文字列または文字__がいくつか含まれるか[調べたい|カウントしたい]
'''

_文字列_.count(__文字列または文字__, 開始位置, 終了位置)
'''
@alt(までの範囲|の[範囲|間])

[_文字列_中の|]__文字列または文字__の出現数を範囲を指定してカウントしたい
開始位置から終了位置までに__文字列または文字__がいくつか含まれるか調べる
'''

_文字列_.startswith(__文字列または文字__)
'''
@alt(接頭辞|先頭|プレフィックス|左[側|端])
@alt(始まる|開始する)

{_文字列_が|__文字列または文字__で}始まるかどうか
_文字列_の接頭辞[が|は]__文字列または文字__かどうか
'''

_文字列_.startswith(__文字列または文字__, 開始位置)
'''
{_文字列_の開始位置以降が|__文字列または文字__で}始まるかどうか
'''

_文字列_.endswith(__文字列または文字__)
'''
@alt(接尾辞|末尾|サフィックス|右[側|端])
@alt(終わる|終了する)

{_文字列_が|__文字列または文字__で}終わるかどうか
_文字列_の接尾辞[が|は]__文字列または文字__かどうか
'''

_文字列_.removeprefix(__文字列または文字__)
'''
@alt(安全に|エラーなく)
{[|安全に]|_文字列_の接頭辞から|__文字列または文字__を}除きたい
_文字列_から接尾辞を除きたい
'''

_文字列_.removesuffix(__文字列または文字__)
'''
{[|安全に]|_文字列_の接尾辞から|__文字列または文字__を}除きたい
_文字列_から接尾辞を取り除[く|いた_文字列_]
'''

_ファイル名_ = 'file.txt'  # ファイル name
__ファイル拡張子__ = '.csv'

_ファイル名_.startswith(__ファイル拡張子__)
'''
{_ファイル名_が|__ファイル拡張子__[ファイル|]}かどうか
'''

_文字列_.isupper()
'''
_文字列_が[全て|]大文字かどうか
'''

_文字列_.islower()
'''
_文字列_が[全て|]小文字かどうか
'''

_文字列_.isdigit()
'''
_文字列_が[全て|]数字かどうか
'''

_文字列_.isalpha()
'''
_文字列_が[全て|]アルファベットかどうか
'''

_文字列_.isalnum()
'''
_文字列_が[全て|]英数字かどうか
'''

_文字列_.isascii()
'''
@alt(アスキー文字|ASCII文字)

_文字列_が[全て|]アスキー文字かどうか
'''

_文字列_.isspace()
'''
_文字列_が[全て|]空白[文字|][からなる|]かどうか
'''

_文字列_.isdecimal()
'''
_文字列_[は|が][全て|]十進数字かどうか
'''

_文字列_.isnumeric()
'''
_文字列_[は|が][全て|]数値かどうか
'''

any(c.is__文字種__() for c in _文字列_)
'''
{_文字列_中に|[ひとつでも|]__文字種__が}含まれるかどうか
'''

any(not c.is__文字種__() for c in _文字列_)
'''
{_文字列_中に|[ひとつも|]__文字種__が}含まれない[かどうか|ことを確認したい]
{_文字列_中に|[ひとつでも|]非__文字種__が}含まれるかどうか
'''

_文字列_.isidentifier()
'''
_文字列_[は|が][全て|][識別子|変数名]かどうか
'''

keyword.iskeyword(_文字列_)
'''
_文字列_[は|が][Pythonの|]キーワードかどうか
'''

_文字列_.isprintable()
'''
_文字列_[は|が][全て|]印字できるかどうか
'''

_文字列_.istitle()
'''
_文字列_[は|が]タイトルケースかどうか
'''

_文字列_.encode(encoding='utf-8', errors='strict')
'''
{_文字列_を|[UTF8で|]}バイト列に変換したい
'''

_文字列_.encode(encoding='sjis', errors='ignore')
'''
{_文字列_を|SJISで}バイト列に変換したい
'''

_文字列_.encode(encoding='unicode_escape')
'''
{_文字列_を|[ユニコードエスケープ|アスキー文字[だけ|のみ]で]}バイト列に変換したい
'''

encoding = "utf-8"

_文字列_.encode(encoding=encoding)
'''
{_文字列_を|_エンコーディング名_で}バイト列に変換したい
'''

_文字列_.encode(errors="ignore")
'''
{エラーを無視して|_文字列_を}バイト列に変換したい
'''

args = []
書式 = ''

_辞書_ = {'A': '1'}

__文字列または書式__.format(*__リストまたはタプル__)
'''
@alt(フォーマットしたい|[文字列|]整形したい)
@alt(パラメータ|引数)
{__文字列または書式__を|__リストまたはタプル__[で|をパラメータとして]}フォーマットしたい
'''

__文字列または書式__.format_map(_辞書_)
'''
{__文字列または書式__を|_辞書_[で|をパラメータにして]}フォーマットしたい
'''

len(_文字列_)
'''
文字列長[|が知りたい]
_文字列_の[長さ|文字数|大きさ][|が知りたい]
'''

_文字列_[0]
'''
_文字列_の[先頭|最初][|の文字][|が知りたい]
'''

_文字列_[-1]
'''
_文字列_の[末尾|最後][|の文字][|が知りたい]
'''

_文字列_[n]
'''
_文字列_のn番目[|の文字][|が知りたい]
'''

_文字列_ == _文字列_
'''
_文字列_と_文字列_[は|が][同じ|等しい]かどうか
'''

_文字列_ != _文字列_
'''
_文字列_と_文字列_[は|が][等しく|同じで]ないかどうか
'''

_文字列_ < _文字列_
'''
{_文字列_と_文字列_を|辞書順で}比較したい
{_文字列_[が|は]_文字列_より|辞書順で}[前|小さい]かどうか
'''

_文字列_ > _文字列_
'''
{_文字列_[が|は]_文字列_より|辞書順で}[後ろ|大きい]かどうか
'''

_文字列_.casefold() == _文字列_.casefold()
'''
@alt(ケースを無視して|大文字小文字を無視して)
{_文字列_と_文字列_[が|は]|ケースを無視して}[同じ|等しい]かどうか
'''

_文字列_.casefold() < _文字列_.casefold()
'''
_文字列_と_文字列_をケースを無視して比較したい
'''

# Tips
('ァ' <= _文字_ <= 'ン')
'''
@alt(片仮名|カタカナ)
@alt(平仮名|ひらがな)
文字[が|は]片仮名かどうか
'''

('ぁ' <= _文字_ <= 'ん')
'''
_文字_[が|は]平仮名かどうか
'''

('\u4E00' <= _文字_ <= '\u9FD0')
'''
_文字_[が|は]漢字かどうか
'''

re.search('[\u4E00-\u9FD0]', _文字列_)
'''
{_文字列_中に|漢字が}[含まれる|使われている]かどうか
'''

re.search('[あ-んア-ン\u4E00-\u9FD0]', _文字列_)
'''
{_文字列_[中|]に|日本語が}[含まれる|使われている]かどうか
'''

''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in _文字列_])
'''
[_文字列_[中|]の|]片仮名を平仮名に変換したい
'''

''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in _文字列_])
'''
[_文字列_[中|]の|]平仮名を片仮名に変換したい
'''

_文字列_.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
'''
[_文字列_[中|]の|]全角数字を半角[数字|]に変換したい
'''
