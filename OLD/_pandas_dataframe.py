import numpy as np
import pandas as pd
'''
[Pandas|データフレーム]を使いたい
'''

import seaborn as sns

_整数_ = 1
_型名_ = int

_列名_ = 'A'
列名のリスト = ['A', 'B', 'C']
_データフレーム_ = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=列名のリスト)


# 確認系

_データフレーム_.head()
'''
@alt(が見たい|を確認したい|を表示したい)
_データフレーム_[|の内容]が見たい
_データフレーム_の[先頭|最初]が見たい
'''

_データフレーム_.tail()
'''
_データフレーム_の[末尾|最後]が見たい
'''

_データフレーム_.head(_整数_)  # 行数
'''
@alt(抽出したい|取り出したい)
_データフレーム_の[先頭|最初|上]_整数_行を抽出したい
'''

_データフレーム_.tail(_整数_)  # 行数
'''
_データフレーム_の[末尾|最後|下]_整数_行を抽出したい
'''

行数 = 10

_データフレーム_.sample(行数)
'''
@alt(データ行|行)
{_データフレーム_から|ランダムに|データ行}を抽出したい
_データフレーム_を[|ランダム]サンプリングしたい
'''

_データフレーム_.sample(_整数_)
'''
{_データフレーム_から|ランダムに|_整数_行を}抽出したい
_データフレーム_から_整数_行、[|ランダム]サンプリングしたい
'''

_データフレーム_.sample(_整数_, replace=True)
'''
@alt(重複ありで|重複を認めて)
{_データフレーム_から|重複ありで|ランダムに|_整数_行を}サンプリングしたい
'''

開始行 = 0
終了行 = 2

_データフレーム_[開始行:終了行+1]
'''
@alt(新しく表にしたい|抽出したい)
{_データフレーム_のデータ行を|[範囲指定して|一部]}新しく表にしたい
'''

_データフレーム_[_整数_:_整数_]
'''
{_データフレーム_を|_整数_行目から_整数_行目まで}新しく表にしたい
'''

_データフレーム_[_整数_:]
'''
_データフレーム_の_整数_行[|目][以降|より後ろ][|を]新しく表にしたい
'''

_データフレーム_[:_整数_]
'''
_データフレーム_の_整数_行[|目][まで|より前][|を]新しく表にしたい
'''

_データフレーム_.loc[_整数_]
'''
_データフレーム_の_整数_[行目|番目の行]を抽出したい
_データフレーム_のインデックスが_整数_の行を抽出したい
'''

# 列名

_データフレーム_[_列名_]
'''
@alt(抽出したい|取り出したい)
_データフレーム_から一列、抽出したい
[_データフレーム_から|]_列名_を抽出したい
'''

_データフレーム_[_列名_].values
'''
@alt(に変換したい|にしたい)
[_データフレーム_の|]_列名_を配列に変換したい
{[_データフレーム_の|]_列名_を|配列として}抽出したい
'''

_データフレーム_[_列名_].values.tolist()
'''
[_データフレーム_の|]_列名_をリストに変換したい
{[_データフレーム_の|]_列名_を|リストとして}抽出したい
'''

_データフレーム_[[_列名_]]
'''
_データフレーム_からカラムを１つ[|のみ|だけ]選択したい
_列名_[のみ|だけ]の[新しい|]データフレームが欲しい
'''

_データフレーム_[[_列名_, _列名_]]
'''
_データフレーム_からカラムを２つ[|のみ|だけ]選択したい
_列名_と_列名_[のみ|だけ]の[新しい|]データフレームが欲しい
'''

_データフレーム_[[_列名_, _列名_, _列名_]]
'''
_データフレーム_からカラムを３つ[|のみ|だけ]選択したい
_列名_と_列名_と_列名_[のみ|だけ]の[新しい|]データフレームが欲しい
'''

_データフレーム_[列名のリスト]
'''
_データフレーム_から列名のリストを指定して選択したい
'''

_データフレーム_.info()
'''
_データフレーム_の[列名の一覧|概要]が見たい
'''

_データフレーム_.columns
'''
@alt(列挙したい|全て見たい)
_データフレーム_の列名の一覧が欲しい
_データフレーム_の列名を列挙したい
'''

_データフレーム_.columns = 列名のリスト
'''
[_データフレーム_の|]カラム名を[列名のリストで|全て]置き替えたい
'''

_データフレーム_.select_dtypes('object').columns
'''
@alt(カテゴリデータ|[質的データ|数値データ以外])

_データフレーム_からカテゴリデータの列名の一覧が欲しい
_データフレーム_からカテゴリデータの列名を列挙したい
'''

_データフレーム_.select_dtypes(_型名_).columns
'''
_データフレーム_から_型名_の列名の一覧が欲しい
_データフレーム_の_型名_の列名を列挙したい
'''

_データフレーム_.index
'''
_データフレーム_のインデックス[|の名前]の一覧が欲しい
'''

_データフレーム_.values
'''
_データフレーム_を[まとめて|全て|]配列に変換したい
'''

_データフレーム_.dtypes
'''
_データフレーム_のデータ型の一覧が欲しい
'''

_データフレーム_.select_dtypes(include=[_型名_])
'''
_データフレーム_からある型の列[を|のみ|だけ]抽出したい
'''

_データフレーム_.select_dtypes(exclude=[_型名_])
'''
_データフレーム_からtypeList[で指定した|の]データ型のカラム[を|のみ|だけ]除外したい
'''

__X__ = 'object'
'''
@X('object';'number';ty)
@Y(カテゴリデータ;数値データ;ty[|型])
'''

_データフレーム_.select_dtypes(__X__)
'''
_データフレーム_から__Y__[のカラム][を|のみ|だけ]抽出したい
'''

_データフレーム_.shape
'''
_データフレーム_の[シェイプ|形状]が見たい
_データフレーム_の[次元[の大きさ|数]|行数と列数]が見たい

'''

_データフレーム_.T
'''
_データフレーム_を転置したい
_データフレーム_の[行と列|行列]を[入れ替えたい|ひっくり返したい]
'''

__表__ = _データフレーム_
'''
@poly(__表__;_データフレーム_;_列名_と_列名_ _データフレーム_[[_列名_, _列名_]])
'''

_データフレーム_.corr()
'''
_データフレーム_のカラム間の[相関行列|相関[係数|]]を[まとめて|]求めたい
'''

__表__.corr()
'''
__表__[相関行列|相関[係数|]]を[まとめて|]求めたい
__表__の相関行列[|を求めたい]
'''

__表__.corr(method='pearson')
'''
{[ピアソン|[|積率]相関係数]で_|__表__の相関行列を}求めたい
'''

__表__.corr(method='kendall')
'''
{[ケンドール[|順位]相関係数|]で_|__表__の相関行列を}求めたい
'''

__表__.corr(method='spearman')
'''
{スピアマン[[|順位]相関係数|]で_|__表__の相関行列を}求めたい
'''

sns.heatmap(__表__.corr())
'''
@alt(描画したい|グラフ化したい)

{__表__の相関行列を|[ヒートマップで_|]}描画したい
{__表__の相関行列を|[ヒートマップで_|]}可視化したい
'''

_データフレーム_.round()
'''
@alt(丸めたい|四捨五入したい)
@alt(丸めて|四捨五入して)
@alt[まとめて|全て|]
@alt(インプレイスしたい|更新したい|置き替えたい)
_データフレーム_[の数値|]をまとめて[|整数に]丸めたい
'''

_データフレーム_.round(_整数_)
'''
_データフレーム_[の数値|]をまとめて小数点以下_整数_桁で丸めたい
'''

# 変更したい

_データフレーム_.rename(columns={_列名_: _列名_, _列名_: _列名_})
'''
@alt(リネームしたい|名前[|を]変更したい)
@alt(付け直したい|変更したい)

_データフレーム_のカラムをリネームしたい
_データフレーム_のカラムの名前を付け直したい
'''

_データフレーム_.columns = [str(x).replace(s, s2) for x in _データフレーム_.columns]
'''
@alt(まとめて|一度に|全て)

{_データフレーム_のカラムの名前を|まとめて}[|文字列]置換したい
'''

_データフレーム_.rename(index={x: y})
'''
_データフレーム_のインデックスの名前をまとめて付け直したい
'''

_データフレーム_.set_index(_列名_)
'''
[_データフレーム_の|]_列名_をインデックスに設定したい
'''

_データフレーム_.reset_index()
'''
_データフレーム_のインデックスを[リセットしたい|振り直したい]
'''

# datetime
__値__ = 1

_データフレーム_[_データフレーム_[_列名_] == __値__]
'''
@poly(__値__;_整数_;_文字列_)
@poly(__値2__;_整数_;_文字列_)
@alt(を抽出したい|[のみ|だけ]残したい)

[_データフレーム_の|]_列名_が__値__[と同じ|に等しい]行データを抽出したい
_列名_[|の値]が__値__の行[だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[_データフレーム_[_列名_] != __値__]
'''
[_データフレーム_の|]_列名_が__値__[でない|に等しくない]行データを抽出したい
_列名_[|の値]が__値__でない行[だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[(_データフレーム_[_列名_] == __値__) & (_データフレーム_[_列名_] == __値2__)]
'''
[_データフレーム_|]の行データを条件で[フィルタしたい|抽出したい]
_列名_が__値__に等しく、[かつ|]_列名_が__値2__に等しい行データを抽出したい
'''

_データフレーム_[_データフレーム_[_列名_] < __値__]
'''
[_データフレーム_の|]_列名_が__値__より[小さい|少ない]行データを抽出したい
_列名_[|の値]が__値__より[小さい|少ない]行[だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[_データフレーム_[_列名_] <= __値__]
'''
[_データフレーム_の|]_列名_が__値__以下の行データ[のみ|だけ|を]抽出したい
_列名_[|の値]が__値__以下の行[だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[_データフレーム_[_列名_] > __値__]
'''
[_データフレーム_の|]_列名_が__値__より[大きい|多い]行データを抽出したい
_列名_[|の値]が__値__より[大きい|多い][だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[_データフレーム_[_列名_] >= __値__]
'''
[_データフレーム_の|]_列名_が__値__以上の行データを抽出したい
_列名_[|の値]が__値__以上の行[だけ|のみ]のデータフレームが欲しい
'''

_データフレーム_[(__値__ < _データフレーム_[_列名_]) & (_データフレーム_[_列名_] < __値__)]
'''
_列名_が__値__より大きく、__値__より小さい行データを抽出したい
'''

_データフレーム_[(__値__ <= _データフレーム_[_列名_]) & (_データフレーム_[_列名_] <= __値__)]
'''
_列名_が__値__以上、__値__以下の行データを抽出したい
'''

_データフレーム_[(__値__ <= _データフレーム_[_列名_]) & (_データフレーム_[_列名_] < __値__)]
'''
_列名_が__値__以上、__値__未満の行データを抽出したい
'''

_リスト_ = ['A', 'B']

_データフレーム_[_データフレーム_[_列名_].isin(_リスト_)]
'''
_リスト_の値が_列名_に含まれる行データを抽出したい
_列名_において_リスト_内の値[だけ|のみ]抽出したい
'''

_データフレーム_[~_データフレーム_[_列名_].isin(_リスト_)]
'''
_リスト_の値が_列名_に含まれない行データを抽出したい
_列名_において_リスト_外の値[だけ|のみ]抽出したい
'''

_文字列_ = 'a'
正規表現 = 'b'

_データフレーム_[_データフレーム_[_列名_].str.contains(_文字列_)]
'''
{[データフレームの|]_列名_において|_文字列_が}[含まれる|ある|存在したい]行データを抽出したい
'''

_データフレーム_[~_データフレーム_[_列名_].str.contains(_文字列_)]
'''
{[データフレームの|]_列名_に|_文字列_が}[含まれない|ない|存在しない]行データを抽出したい
'''

_データフレーム_[_データフレーム_[_列名_].str.match(正規表現)]
'''
[データフレームの|]_列名_が正規表現にマッチしたい行データを抽出したい
'''

_データフレーム_[~_データフレーム_[_列名_].str.match(正規表現)]
'''
[データフレームの|]_列名_が正規表現にマッチしない行データを抽出したい
'''

_データフレーム_[_データフレーム_[_列名_].str.startswith(_文字列_)]
'''
_列名_が_文字列_で始まる行データを抽出したい
_列名_の接頭辞が_文字列_である行データを抽出したい
'''

_データフレーム_[~_データフレーム_[_列名_].str.startswith(_文字列_)]
'''
_列名_が_文字列_で始まらない行データを抽出したい
_列名_の接頭辞が_文字列_でない行データを抽出したい
'''

_データフレーム_[_データフレーム_[_列名_].str.endswith(_文字列_)]
'''
_列名_が_文字列_で終わる行データを抽出したい
_文字列_が_列名_の接尾辞である行データを抽出したい
'''

_データフレーム_[~_データフレーム_[_列名_].str.endswith(_文字列_)]
'''
_列名_が_文字列_で終わらない行データを抽出したい
_文字列_が_列名_の接尾辞でない行データを抽出したい
'''

# ドロップ・欠損値処理

_データフレーム_.style.highlight_null()
'''
@alt(付け|つけ)

_データフレーム_の欠損値が[含まれる|ある][箇所|部分][に[色を付ける]|を[色付けしたい]]
'''

_データフレーム_.drop(_整数_, axis=0)
'''
@alt(ドロップしたい|[削除したい|消したい]|[除きたい|取り除きたい])

_データフレーム_の_整数_行目をドロップしてみたい
'''

_データフレーム_.drop(_整数_, axis=0, inplace=True)
'''
@alt(破壊的に|インプレイスで)

_データフレーム_の_整数_行目を[|破壊的に]ドロップしたい
'''

_データフレーム_.drop(_列名_, axis=1)
'''
[_データフレーム_の|]_列名_をドロップしてみたい
'''

_データフレーム_.drop(_列名_, axis=1, inplace=True)
'''
@alt(_変更を反映したい|入れ替えたい|更新したい)

[_データフレーム_の|]_列名_を[|破壊的に]ドロップしたい
'''

_データフレーム_ = pd.DataFrame(data={'A': ['A', 'B'], 'B': ['B', 'A']})

_データフレーム_.drop([_列名_, _列名_], axis=1)
'''
_データフレーム_の[複数の|二つの]カラムをドロップしてみたい
'''

_データフレーム_.drop([_列名_, _列名_], axis=1, inplace=True)
'''
_データフレーム_の[複数の|二つの]カラムをドロップしたい
'''

_データフレーム_ = pd.DataFrame(data={_列名_: ['A', 'B'], _列名_: ['B', 'A']})

_データフレーム_.drop(columns, axis=1, inplace=True)
'''
_データフレーム_のcolumnsで指定したカラムをドロップしたい
'''

# 欠損値

_データフレーム_.dropna()
'''
@alt(の中|の内)
_データフレーム_[中|]の欠損値をドロップしてみたい
欠損値が[ある|存在したい]行をドロップしてみたい
'''

_データフレーム_.dropna(inplace=True)
'''
_データフレーム_[中|]の欠損値を[|破壊的に]ドロップしたい
欠損値[が|の][ある|存在したい]行を[|破壊的に]ドロップしたい
'''

# 重複

_データフレーム_ = pd.DataFrame(data={_列名_: [1, 1], _列名_: [1, 1]})

_データフレーム_.duplicated()
'''
@alt(重複行|重複した行|重複)

_データフレーム_の重複行が見たい
_データフレーム_[に重複があるか|が重複しているか]見たい
_データフレーム_の重複行のマスクが欲しい
'''

_データフレーム_.duplicated().sum()
'''
_データフレーム_の重複行を数えたい
_データフレーム_[は|が]何行重複しているか見たい
'''

_データフレーム_[_データフレーム_.duplicated(keep=False)]
'''
[_データフレーム_の|]重複した行[のみ|だけ|]新しいデータフレームにしたい
'''

_データフレーム_[~ _データフレーム_.duplicated(keep=False)]
'''
[_データフレーム_の|]重複して[|い]ない行[のみ|だけ|]新しいデータフレームにしたい
'''

_データフレーム_.duplicated(subset=_列名_)
'''
_列名_[について|の]重複行が見たい
'''

_データフレーム_.duplicated(subset=[_列名_, _列名_])
'''
_列名_と_列名_[について|の]重複が見たい
複数の_列名_[について|の]重複が見たい
'''

_データフレーム_.drop_duplicates(inplace=True)
'''
_データフレーム_から重複を[|破壊的に]ドロップしたい
_データフレーム_から同じ[内容の|]行データを[|破壊的に]ドロップしたい
'''


_データフレーム_.drop_duplicates(keep=False, inplace=True)
'''
_データフレーム_から重複を残さず重複をドロップしたい
_データフレーム_から重複した行データを残さずドロップしたい
'''

_データフレーム_.drop_duplicates(subset=_列名_, inplace=True)
'''
_列名_[で|において]重複があれば、ドロップしたい
'''

_データフレーム_.drop_duplicates(subset=[_列名_, _列名_], inplace=True)
'''
_列名_と_列名_において重複が除去したい
複数の_列名_の重複を取り除きたい
'''
