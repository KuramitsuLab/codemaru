# list

_リスト_, __数列__ = [1, 2, 3]
_リスト2_ = [4, 5]
_タプル_ = (1, 2, 3)
__リストまたはタプル__ = _リスト_
step = 2
iterable = [1, 2, 3]
_整数_ = 2
__要素__, __要素2__ = 1, 1
'''
@poly(__要素__;_文字列_;_整数_;_結果_)
@poly(__要素2__;_文字列_;_整数_;_結果_)
@poly(__リストまたはタプル__;_リスト_;_タプル_)
@poly(__数列__;_リスト_;数列)
@poly(_整数;_整数_;n)
@poly(_整数_;_整数_;m)
'''


# リスト

[]
'''
[空列|空のリスト]が欲しい
'''

()
'''
空の[タプル|組]が欲しい
'''

(__要素__,)
'''
__要素__一つの[タプル|組]が欲しい
'''

(__要素__, __要素2__)
'''
__要素__と__要素2__[から成る|の]ペアが欲しい
'''

[__要素__]
'''
__要素__一つのりストが欲しい
'''

[__要素__] * _整数_
'''
_整数_個の__要素__があるリストが欲しい
'''

[0] * _整数_
'''
長さ_整数_の[リスト|数列]が欲しい
'''

行数,列数=2,2

[[0] * 列数 for _ in range(行数)]
'''
２次元リストが欲しい
'''

[[0] * _整数_ for _ in range(_整数_)]
'''
_整数_行_整数_列の[２|二]次元リストが欲しい
_整数_[×|x]_整数_の[２|二]次元リストが欲しい
'''

tuple(_リスト_)
'''
@alt(に変換したい|[に|化]したい)
リストを[タプル|組]に変換したい
リストをイミュータブルにしたい
'''

list(_タプル_)
'''
タプルをリストに変換したい
タプルをミュータブルにしたい
'''

len(__リストまたはタプル__)
'''
@alt(を知りたい|を調べたい|が欲しい|)
@alt(長さ|要素数|個数)

__リストまたはタプル__の長さを知りたい
'''

len(__リストまたはタプル__) == 0
'''
__リストまたはタプル__が空かどうか
'''

len(__リストまたはタプル__) != 0
'''
__リストまたはタプル__が空でないかどうか
'''

__リストまたはタプル__ + __リストまたはタプル__
'''
@alt(連結したい|結合したい|接続したい|加えたい)

[二つの|]__リストまたはタプル__を連結したい
'''

__リストまたはタプル__ * _整数_
'''
__リストまたはタプル__を_整数_倍したい
__リストまたはタプル__を_整数_回、連結したい
'''

__リストまたはタプル__[0]
'''
@alt(先頭|最初)
@alt(末尾|最後)

__リストまたはタプル__の先頭[|の[要素|値]]が欲しい
'''

__リストまたはタプル__[-1]
'''
__リストまたはタプル__の末尾[|の[要素|値]]が欲しい
'''

__リストまたはタプル__[_整数_]
'''
__リストまたはタプル__の_整数_番目の[|の[要素|値]]が欲しい
'''

__リストまたはタプル__[1:]
'''
@alt(取り除きたい|除きたい|捨てたい)
__リストまたはタプル__の先頭を[取り除きたい|除きたい|捨てたい]
'''

__リストまたはタプル__[_整数_:]
'''
@alt(取り出したい|得る|抽出したい)
__リストまたはタプル__の先頭の_整数_個を取り除きたい
__リストまたはタプル__の_整数_番目以降の[部分|要素]を取り出したい
'''

__リストまたはタプル__[:-1]
'''
__リストまたはタプル__の末尾を取り除きたい
'''

__リストまたはタプル__[:-_整数_]
'''
__リストまたはタプル__の末尾の_整数_要素を取り除きたい
__リストまたはタプル__の末尾から_整数_番目以前の[部分|要素]を取り出したい
'''

__リストまたはタプル__[::-1]
'''
__リストまたはタプル__の[要素|値]を逆順にしたい
__リストまたはタプル__を逆順にしたい
'''

__リストまたはタプル__[::2]
'''
{__リストまたはタプル__を|[ひとつ置きに|ひとつ飛ばしで]}取り出したい
'''

__リストまたはタプル__[_整数_:_整数_]
'''
__リストまたはタプル__の_整数_番目から_整数_番目[まで][の部分][|を取り出したい]
'''

slice(_整数_)
'''
_整数_までのスライスが欲しい
'''

slice(_整数_, _整数_)
'''
_整数_から_整数_までのスライスが欲しい
'''

slice(_整数_, _整数_, step)
'''
nからn2までのstepごとによるスライスが欲しい
'''

sum(__数列__)
'''
@alt(を求めたい|計算したい|が欲しい)

__数列__の[合計値|合計|総和]を求めたい
'''

min(__数列__)
'''
@alt(一番|最も)

__数列__[の中|]の[最小値|一番小さい値]を求めたい
'''

max(__数列__)
'''
__数列__[|の中]の[最大値|一番大きい値]を求めたい
'''

sum(__数列__)/len(__数列__)
'''
__数列__の[平均値|平均]を求めたい
'''


range(len(_リスト_))
'''
リストの長さだけ繰り返す
'''

range(n)
'''
@test(list(_))
n[個|回]の数値イテラブルが欲しい
0からnの範囲[|で|を得る]
'''

range(n, n2)
'''
@test(list(_))
nからn2の範囲[|で|を得る]
'''

list(range(_整数_))
'''
@alt(数列|整数列|整数リスト)
_整数_個の数列が欲しい
'''

list(range(_整数_, _整数_+1))
'''
_整数_から_整数_までの数列が欲しい
'''

list(range(_整数_, _整数_+1, 2))
'''
@alt(ひとつ飛ばし|一つ置き)
_整数_から_整数2_までの数列がひとつ飛ばしで欲しい
'''

list(range(0, _整数_, 2))
'''
_整数_までの偶数列が欲しい
'''

list(range(1, _整数_, 2))
'''
_整数_までの奇数列が欲しい
'''


_リスト_.append(__要素__)
'''
@alt(追加したい|加えたい)

_リスト_[に|の末尾に]__要素__を追加したい
'''

_リスト_.extend(_リスト2_)
'''
_リスト_[に|の末尾に]_リスト2_を[追加したい|展開したい]
_リスト_[に|の末尾に]_リスト2_を追加して[拡張したい|広げたい]
'''

_リスト_.insert(_整数_, __要素__)
'''
@alt(挿入したい|差し込む)

_リスト_の_整数_番目に__要素__を[挿入したい|追加したい]
'''

_リスト_.pop()
'''
_リスト_の末尾から[要素|値]を[ポップしたい|取り出したい|取り除きたい]
'''

_リスト_.pop(_整数_)
'''
_リスト_の_整数_番目から[要素|値]を[ポップしたい|取り出したい|取り除きたい]
'''

_リスト_.clear()
'''
@alt(消去したい|消したい)

_リスト_の[全ての|全|][要素|値]を[クリアにしたい|取り除きたい|消去したい|空にしたい]
'''

_リスト_.remove(__要素__)
'''
_リスト_から__要素__を[取り除きたい|取り出したい]
'''

del _リスト_[_整数_]
'''
_リスト_の_整数_番目[の[要素|値]|]を[削除したい|消したい]
'''

__要素__ in __リストまたはタプル__
'''
__要素__[が|は]__リストまたはタプル__の要素かどうか
__要素__[が|は]__リストまたはタプル__に含まれるかどうか
'''

__要素__ not in __リストまたはタプル__
'''
__要素__[が|は]__リストまたはタプル__の要素でないかどうか
__要素__[が|は]__リストまたはタプル__に含まれないかどうか
'''

__リストまたはタプル__.index(__要素__)
'''
@alt(内|中)
@alt(インデックス|位置|場所)

__リストまたはタプル__[|中]の_要素_のインデックスが欲しい
__リストまたはタプル__[|中]の最初の_要素_を探したい
'''

sorted(__リストまたはタプル__)
'''
@alt(ソートしたい|並べたい|並べ直したい)
__リストまたはタプル__[の[要素|値]]をソートしたい
'''

sorted(__リストまたはタプル__, reverse=False)
'''
@alt(昇順に|小さい[順に|方から])

{__リストまたはタプル__[の[要素|値]]を|昇順に}ソートしたい
'''

sorted(__リストまたはタプル__, reverse=True)
'''
@alt(降順に|大きい[順に|方から])

{__リストまたはタプル__[の[要素|値]]を|昇順に}ソートしたい
'''


_リスト_.index(__要素__) if __要素__ in _リスト_ else -1
'''
{_リスト_[|中]の_要素_の位置を|エラーなく}[得たい|知りたい]
'''

def _関数_(x): return x+1


sorted(__リストまたはタプル__, key=_関数_)
'''
{__リストまたはタプル__を|_関数_を使って}ソートしたい
'''

_リスト_.copy()
'''
@alt(複製したい|コピーしたい)

リストを複製したい
'''

reversed(__リストまたはタプル__)
'''
@test(list(_))
@alt(反転したい|逆順にしたい|リバースしたい|逆さにしたい)

__リストまたはタプル__を反転したい
'''

all(__リストまたはタプル__)
'''
__リストまたはタプル__[内の要素][が|は]全て真かどうか
'''

any(__リストまたはタプル__)
'''
__リストまたはタプル__[内の要素][が|は]少なくとも一つ真かどうか
'''

print(*__リストまたはタプル__)
'''
__リストまたはタプル__を[引数として展開して|順に]プリントしたい
{__リストまたはタプル__[の[各|]要素|]を|空白区切りで}プリントしたい
'''

print(*__リストまたはタプル__, sep=',')
'''
__リストまたはタプル__を[引数として展開して|カンマ区切りで]プリントしたい
'''

sum(__リストまたはタプル__)
'''
@alt(フラット化したい|flattenしたい)

２次元__リストまたはタプル__をフラット化したい
'''

enumerate(__リストまたはタプル__)
'''
@alt(ナンバリングし|[番号|順番|順序]付けし)

__リストまたはタプル__をナンバリングしたい
'''

enumerate(__リストまたはタプル__, start=n)
'''
__リストまたはタプル__をnからナンバリングしたい
'''

for i, value in enumerate(__リストまたはタプル__):
    print(i, value) # 
'''
@alt(繰り返し処理|順に処理|一つずつ処理)
__リストまたはタプル__をナンバリングしながら、繰り返し処理したい
'''


filter(_関数_, __リストまたはタプル__)
'''
@alt(のそれぞれ||の各要素)
{__リストまたはタプル__のそれぞれを|_関数_[で|を使って]}フィルタしたい
'''

map(_関数_, __リストまたはタプル__)
'''
{__リストまたはタプル__のそれぞれを|_関数_[で|を使って]}[変換したい|マップしたい]
'''

list(filter(_関数_, __リストまたはタプル__))
'''
@alt(のそれぞれ||の各要素)
{__リストまたはタプル__のそれぞれを|_関数_[で|を使って]}フィルタしたリストが欲しい
'''

list(map(_関数_, __リストまたはタプル__))
'''
__リストまたはタプル__のそれぞれを|_関数_[で|を使って]変換したリストが欲しい
'''
